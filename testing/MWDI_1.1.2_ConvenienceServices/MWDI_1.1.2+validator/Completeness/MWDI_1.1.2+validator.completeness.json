{
	"info": {
		"_postman_id": "8a34fae2-e861-4d21-92c8-661ea509a136",
		"name": "MWDI_1.1.2+testcase.completeness",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9715086"
	},
	"item": [
		{
			"name": "UserInput",
			"item": [
				{
					"name": "for loading user input",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();\r",
									"logger.struc(\"==========================================================================================\");\r",
									"logger.struc(\"===== MWDI_1.1.2+testcase.completeness ===================================================\");\r",
									"logger.struc(\"==========================================================================================\");\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data from File\r",
									"****************************************************************************************/\r",
									"var inputFromFile;\r",
									"try {\r",
									"    inputFromFile = data\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environmental Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"\r",
									"    let mode;\r",
									"    mode = inputFromFile.mode;\r",
									"    // Mode to be applied while running this testcase collection \r",
									"    //   \"analysis\" -> human does detailed analysis of response bodies etc.\r",
									"    //   \"testing\" -> automated approval based on binary result\r",
									"    //   \"debugging\" -> support for programming the testcase collection\r",
									"\r",
									"    let logLevel;\r",
									"    switch(mode) {\r",
									"        case \"debugging\":\r",
									"            logLevel = \"debug\";\r",
									"            break;\r",
									"        case \"analysis\":\r",
									"            logLevel = \"log\";\r",
									"            break;\r",
									"        case \"testing\":\r",
									"            logLevel = \"error\";\r",
									"            break;\r",
									"        default:\r",
									"            logLevel = \"debug\";\r",
									"    };\r",
									"    // Level of detail of the logging; find more info in pre-request script on the collection's level\r",
									"\r",
									"    let serverList = [];\r",
									"    serverList = inputFromFile.serverList;\r",
									"    // list of addresses of applications, controllers etc.\r",
									"    // serverName : key attribute for identifying the servers\r",
									"    // dummyUri : http address that shall be addressed by bare processing Requests\r",
									"    // server : part of the URI that is comprised from protocol, IP address and TCP port\r",
									"    // pathToControlConstruct : part of the URI that is identical for all Requests that are addressing into the device's data tree\r",
									"    // authorizationCode : authentication that has to be sent in case of BasicAuth protection (e.g. OpenDaylight NBI)\r",
									"    // operationKey : ApiKey that has to be sent in case of addressing a MW SDN application (e.g. MicroWaveDeviceInventory)\r",
									"    // userName : user header to be sent in case of addressing a MW SDN application\r",
									"    // originator : originator header to be sent in case of addressing a MW SDN application\r",
									"    // xCorrelator : x-correlator header to be sent in case of addressing a MW SDN application\r",
									"    // traceIndicator : trace-indicator header to be sent in case of addressing a MW SDN application\r",
									"    // customerJourney : customer-journey header to be sent in case of addressing a MW SDN application\r",
									"\r",
									"    let collectionInputList = [];\r",
									"    collectionInputList = inputFromFile.collectionInputList;\r",
									"    // list of inputs to individual test case collections\r",
									"    // serverToBeApplied : server that shall be addressed in the respective request/test case\r",
									"    // mountName : mountName of the device that is to be validated\r",
									"    // linkId : Telefonica LinkID of an example microwave link\r",
									"    // kindOfReference : 'dynamic' for testing against implementations, 'static' for testing against simulators\r",
									"    // suffixUrlEncodingIsRequired : e.g. Mockoon requires the suffix being url encoded, but applications vice versa\r",
									"\r",
									"    pm.environment.set(\"mode\", mode);\r",
									"    pm.environment.set(\"logLevel\", logLevel);\r",
									"    pm.environment.set(\"serverList\", serverList);\r",
									"    pm.environment.set(\"collectionInputList\", collectionInputList);\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Environment variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Collection Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.collectionVariables.clear()\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Collection variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let uri;\r",
									"    let dummyServerInfo;\r",
									"    dummyServerInfo = ExtractServerInformation(inputFromFile.serverList, \"dummy\");\r",
									"    uri = dummyServerInfo.dummyUri;\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    console.error(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        console.error(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "functions()",
			"item": []
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "Completeness",
					"item": [
						{
							"name": "/v1/provide-mac-table-of-all-devices",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"var deviceIsAvailable = false;\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if (Math.floor(responseCode / 100) === 2) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"            deviceIsAvailable = responseObject[\"device-is-available\"]\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var reference;\r",
											"try {\r",
											"    reference = {\r",
											"        \"type\": \"array\",\r",
											"        \"items\": {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"mount-name\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"own-mac-address\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"egress-ltp-uuid\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"original-ltp-name\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"vlan-id\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"remote-mac-address\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"time-stamp-of-data\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! reference could not be defined.\")\r",
											"}\r",
											"\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"/v1/provide-mac-table-of-all-devices could be executed\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if (responseCode == 200) {\r",
											"            logger.log(\"  - ok: /v1/provide-mac-table-of-all-devices could be executed\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: /v1/provide-mac-table-of-all-devices provided \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if (Object.keys(responseObject).length != 0) {\r",
											"            logger.log(\"Reference Schema:\");\r",
											"            logger.log(reference);\r",
											"\r",
											"            logger.log(\"Interface Response:\");\r",
											"            logger.log(responseObject);\r",
											"\r",
											"            let validationResult;\r",
											"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
											"            logger.log(\"Validation Result:\");\r",
											"            logger.log(validationResult);\r",
											"\r",
											"            pm.test(\"Response matches schema definition\", function () {\r",
											"                pm.expect(validationResult.errors.length).to.equal(0)\r",
											"            });\r",
											"            if (validationResult.errors.length == 0) {\r",
											"                logger.log(\"  - ok: Response matches schema definition\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    pm.collectionVariables.set(\"deviceIsAvailable\", deviceIsAvailable)\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! collection variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for (let i = 0; i < serverList.length; i++) {\r",
											"            if (serverList[i].serverName == searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== /v1/provide-mac-table-of-all-devices ================================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var mountName = \"\";\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"try {\r",
											"    let collectionInfo;\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"MwdiCompleteness\");\r",
											"\r",
											"    mountName = collectionInfo.mountName;\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let servicePath;\r",
											"    servicePath = \"/v1/provide-mac-table-of-all-devices\";\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (mountName!=undefined) ) {\r",
											"        uri = server + servicePath\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = '{}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/provide-mac-table-of-specific-device",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== /v1/provide-mac-table-of-specific-device ============================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var mountName = \"\";\r",
											"var linkId = \"\";\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"try {\r",
											"    let collectionInfo;\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"MwdiCompleteness\");\r",
											"\r",
											"    mountName = collectionInfo.mountName;\r",
											"    linkId = collectionInfo.linkId;\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let servicePath;\r",
											"    servicePath = \"/v1/provide-mac-table-of-specific-device\";\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (mountName!=undefined) ) {\r",
											"        uri = server + servicePath\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = ''\r",
											"        +   '{ '\r",
											"        +       '\"mount-name\": \"' + mountName + '\"'\r",
											"        +   ' }';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if (Math.floor(responseCode / 100) === 2) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var reference;\r",
											"try {\r",
											"    reference = {\r",
											"        \"type\": \"array\",\r",
											"        \"items\": {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"mount-name\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"own-mac-address\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"egress-ltp-uuid\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"original-ltp-name\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"vlan-id\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"remote-mac-address\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"time-stamp-of-data\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! reference could not be defined.\")\r",
											"}\r",
											"\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"/v1/provide-mac-table-of-specific-device could be executed\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if (responseCode == 200) {\r",
											"            logger.log(\"  - ok: /v1/provide-mac-table-of-specific-device could be executed\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: /v1/provide-mac-table-of-specific-device provided \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if (Object.keys(responseObject).length != 0) {\r",
											"            logger.log(\"Reference Schema:\");\r",
											"            logger.log(reference);\r",
											"\r",
											"            logger.log(\"Interface Response:\");\r",
											"            logger.log(responseObject);\r",
											"\r",
											"            let validationResult;\r",
											"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
											"            logger.log(\"Validation Result:\");\r",
											"            logger.log(validationResult);\r",
											"\r",
											"            pm.test(\"Response matches schema definition\", function () {\r",
											"                pm.expect(validationResult.errors.length).to.equal(0)\r",
											"            });\r",
											"            if (validationResult.errors.length == 0) {\r",
											"                logger.log(\"  - ok: Response matches schema definition\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for (let i = 0; i < serverList.length; i++) {\r",
											"            if (serverList[i].serverName == searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/read-current-mac-table-from-device",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== /v1/read-current-mac-table-from-device ==============================================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var mountName = \"\";\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"try {\r",
											"    let collectionInfo;\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"MwdiCompleteness\");\r",
											"\r",
											"    mountName = collectionInfo.mountName;\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var requestorProtocol = \"\";\r",
											"var ipv4Address = \"\";\r",
											"var requestorPort = -1;\r",
											"var requestorReceiveOperation = \"\";\r",
											"try {\r",
											"    requestorProtocol = \"HTTP\";\r",
											"    ipv4Address = \"1.1.4.1\";\r",
											"    requestorPort = 4001;\r",
											"    requestorReceiveOperation = \"/v1/receive-requested-mac-address-table\"\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be calculated.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let servicePath;\r",
											"    servicePath = \"/v1/read-current-mac-table-from-device\";\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (mountName!=undefined)  ) {\r",
											"        uri = server + servicePath\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = ''\r",
											"        +   '{ '\r",
											"        +       '\"mount-name\": \"' + mountName + '\", '\r",
											"        +       '\"requestor-protocol\": \"' + requestorProtocol + '\", '\r",
											"        +       '\"requestor-address\": { '\r",
											"        +           '\"ip-address\": { '\r",
											"        +               '\"ipv-4-address\": \"' + ipv4Address + '\"'\r",
											"        +           ' } '\r",
											"        +       ' }, '\r",
											"        +       '\"requestor-port\": \"' + requestorPort + '\", '\r",
											"        +       '\"requestor-receive-operation\": \"' + requestorReceiveOperation + '\"'\r",
											"        +   ' }';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if (Math.floor(responseCode / 100) === 2) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var reference;\r",
											"try {\r",
											"    reference = {\r",
											"        \"type\": \"object\",\r",
											"        \"required\": [\r",
											"            \"request-id\"\r",
											"        ],\r",
											"        \"properties\": {\r",
											"            \"request-id\": {\r",
											"                \"type\": \"string\"\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! reference could not be defined.\")\r",
											"}\r",
											"\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"/v1/read-current-mac-table-from-device could be executed\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if (responseCode == 200) {\r",
											"            logger.log(\"  - ok: /v1/read-current-mac-table-from-device could be executed\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: /v1/read-current-mac-table-from-device provided \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if (Object.keys(responseObject).length != 0) {\r",
											"            logger.log(\"Reference Schema:\");\r",
											"            logger.log(reference);\r",
											"\r",
											"            logger.log(\"Interface Response:\");\r",
											"            logger.log(responseObject);\r",
											"\r",
											"            let validationResult;\r",
											"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
											"            logger.log(\"Validation Result:\");\r",
											"            logger.log(validationResult);\r",
											"\r",
											"            pm.test(\"Response matches schema definition\", function () {\r",
											"                pm.expect(validationResult.errors.length).to.equal(0)\r",
											"            });\r",
											"            if (validationResult.errors.length == 0) {\r",
											"                logger.log(\"  - ok: Response matches schema definition\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for (let i = 0; i < serverList.length; i++) {\r",
											"            if (serverList[i].serverName == searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/provide-list-of-network-element-interfaces-on-path",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== /v1/provide-list-of-network-element-interfaces-on-path ==============================\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var mountName = \"\";\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"try {\r",
											"    let collectionInfo;\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"MwdiCompleteness\");\r",
											"\r",
											"    mountName = collectionInfo.mountName;\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var targetMacAddress = \"\";\r",
											"try {\r",
											"    targetMacAddress = \"01:01:01:01:01:01\";\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be calculated.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let servicePath;\r",
											"    servicePath = \"/v1/provide-list-of-network-element-interfaces-on-path\";\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (mountName!=undefined) ) {\r",
											"        uri = server + servicePath\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = ''\r",
											"        +   '{ '\r",
											"        +       '\"target-mac-address\": \"' + targetMacAddress + '\"'\r",
											"        +   ' }';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if (Math.floor(responseCode / 100) === 2) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var reference;\r",
											"try {\r",
											"    reference = {\r",
											"        \"type\": \"array\",\r",
											"        \"items\": {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"target-mac-address\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"mount-name\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"original-ltp-name\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"vlan-id\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"time-stamp-of-data\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! reference could not be defined.\")\r",
											"}\r",
											"\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"/v1/provide-list-of-network-element-interfaces-on-path could be executed\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if (responseCode == 200) {\r",
											"            logger.log(\"  - ok: /v1/provide-list-of-network-element-interfaces-on-path could be executed\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: /v1/provide-list-of-network-element-interfaces-on-path provided \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if (Object.keys(responseObject).length != 0) {\r",
											"            logger.log(\"Reference Schema:\");\r",
											"            logger.log(reference);\r",
											"\r",
											"            logger.log(\"Interface Response:\");\r",
											"            logger.log(responseObject);\r",
											"\r",
											"            let validationResult;\r",
											"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
											"            logger.log(\"Validation Result:\");\r",
											"            logger.log(validationResult);\r",
											"\r",
											"            pm.test(\"Response matches schema definition\", function () {\r",
											"                pm.expect(validationResult.errors.length).to.equal(0)\r",
											"            });\r",
											"            if (validationResult.errors.length == 0) {\r",
											"                logger.log(\"  - ok: Response matches schema definition\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for (let i = 0; i < serverList.length; i++) {\r",
											"            if (serverList[i].serverName == searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/v1/provide-list-of-network-element-interfaces-on-path-in-generic-representation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"logger.struc(\"\\n===== /v1/provide-list-of-network-element-interfaces-on-path-in-generic-representation ====\");\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var mountName = \"\";\r",
											"var linkId = \"\";\r",
											"var serverInfo = {};\r",
											"var dummyServerInfo = {};\r",
											"try {\r",
											"    let collectionInfo;\r",
											"    let collectionInputList;\r",
											"    collectionInputList = pm.environment.get(\"collectionInputList\");\r",
											"    collectionInfo = ExtractCollectionInput(collectionInputList, \"MwdiCompleteness\");\r",
											"\r",
											"    mountName = collectionInfo.mountName;\r",
											"    linkId = collectionInfo.linkId;\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let serverToBeApplied;\r",
											"    serverToBeApplied = collectionInfo.serverToBeApplied;\r",
											"    serverInfo = ExtractServerInformation(serverList, serverToBeApplied);\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var fieldName1 = \"\";\r",
											"var fieldValue1 = \"\";\r",
											"try {\r",
											"    fieldName1 = \"TargetMacAddress\";\r",
											"    fieldValue1 = \"01:01:01:01:01:01\";\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be calculated.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Local Variables and Preparing the Request\r",
											"****************************************************************************************/\r",
											"try {\r",
											"    let servicePath;\r",
											"    servicePath = \"/v1/provide-list-of-network-element-interfaces-on-path-in-generic-representation\";\r",
											"\r",
											"    let server;\r",
											"    server = serverInfo.server;\r",
											"\r",
											"    let uri;\r",
											"    if ( (mountName!=\"\") && (mountName!=undefined) ) {\r",
											"        uri = server + servicePath\r",
											"    } else {\r",
											"        logger.warn(\"Input data incomplete.\");\r",
											"        uri = dummyServerInfo.dummyUri\r",
											"    }\r",
											"\r",
											"    let requestBody;\r",
											"    requestBody = ''\r",
											"        +   '{ '\r",
											"        +       '\"input-value-list\": [ '\r",
											"        +           '{ '\r",
											"        +               '\"field-name\": \"' + fieldName1 + '\", '\r",
											"        +               '\"field-value\": \"' + fieldValue1 + '\" '\r",
											"        +           '} '\r",
											"        +       '] '\r",
											"        +   '}';\r",
											"\r",
											"\r",
											"    pm.variables.clear();\r",
											"\r",
											"    pm.variables.set(\"uri\", uri);\r",
											"    pm.variables.set(\"requestBody\", requestBody);\r",
											"    \r",
											"    pm.request.headers.upsert({ key: \"Authorization\", value: serverInfo.authorizationCode });\r",
											"    pm.request.headers.upsert({ key: \"operation-key\", value: serverInfo.operationKey });\r",
											"    pm.request.headers.upsert({ key: \"user\", value: serverInfo.userName });\r",
											"    pm.request.headers.upsert({ key: \"originator\", value: serverInfo.originator });\r",
											"    pm.request.headers.upsert({ key: \"x-correlator\", value: serverInfo.xCorrelator });\r",
											"    pm.request.headers.upsert({ key: \"trace-indicator\", value: serverInfo.traceIndicator });\r",
											"    pm.request.headers.upsert({ key: \"customer-journey\", value: serverInfo.customerJourney });\r",
											"\r",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
											"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Local variables could not be set.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for(let i=0; i<serverList.length; i++) {\r",
											"            if(serverList[i].serverName==searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											"function ExtractCollectionInput(collectionInputList, searchedCollection) {\r",
											"    try {\r",
											"        for(let i=0; i<collectionInputList.length; i++) {\r",
											"            if(collectionInputList[i].collectionName==searchedCollection) {\r",
											"                return collectionInputList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! collectionInputList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Collection could not be found in collectionInputList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/****************************************************************************************\r",
											"* Loading Input Data\r",
											"****************************************************************************************/\r",
											"var uri;\r",
											"var dummyUri;\r",
											"try {\r",
											"    uri = pm.variables.get(\"uri\");\r",
											"\r",
											"    let serverList;\r",
											"    serverList = pm.environment.get(\"serverList\");\r",
											"    let dummyServerInfo;\r",
											"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\");\r",
											"    dummyUri = dummyServerInfo.dummyUri;\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! Input data could not be loaded.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Extracting Result\r",
											"****************************************************************************************/\r",
											"var responseCode;\r",
											"var responseObject = {};\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        let response;\r",
											"        response = pm.response;\r",
											"\r",
											"        responseCode = parseInt(response.code);\r",
											"\r",
											"        if (Math.floor(responseCode / 100) === 2) {\r",
											"            responseObject = JSON.parse(response.stream);\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! result could not be extracted.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Processing\r",
											"****************************************************************************************/\r",
											"var reference;\r",
											"try {\r",
											"    reference = {\r",
											"        \"type\": \"object\",\r",
											"        \"required\": [\r",
											"            \"response-value-list\",\r",
											"            \"consequent-action-list\"\r",
											"        ],\r",
											"        \"properties\": {\r",
											"            \"response-value-list\": {\r",
											"                \"type\": \"array\",\r",
											"                \"items\": {\r",
											"                    \"type\": \"object\",\r",
											"                    \"required\": [\r",
											"                        \"field-name\",\r",
											"                        \"value\",\r",
											"                        \"datatype\"\r",
											"                    ],\r",
											"                    \"properties\": {\r",
											"                        \"field-name\": {\r",
											"                            \"type\": \"string\"\r",
											"                        },\r",
											"                        \"value\": {\r",
											"                            \"type\": \"string\"\r",
											"                        },\r",
											"                        \"datatype\": {\r",
											"                            \"type\": \"string\"\r",
											"                        }\r",
											"                    }\r",
											"                }\r",
											"            },\r",
											"            \"consequent-action-list\": {\r",
											"                \"type\": \"array\",\r",
											"                \"items\": {\r",
											"                    \"type\": \"object\",\r",
											"                    \"required\": [\r",
											"                        \"label\",\r",
											"                        \"request\",\r",
											"                        \"display-in-new-browser-window\"\r",
											"                    ],\r",
											"                    \"properties\": {\r",
											"                        \"label\": {\r",
											"                            \"type\": \"string\"\r",
											"                        },\r",
											"                        \"request\": {\r",
											"                            \"type\": \"string\"\r",
											"                        },\r",
											"                        \"input-value-list\": {\r",
											"                            \"type\": \"array\",\r",
											"                            \"items\": {\r",
											"                                \"type\": \"object\",\r",
											"                                \"required\": [\r",
											"                                    \"field-name\"\r",
											"                                ],\r",
											"                                \"properties\": {\r",
											"                                    \"field-name\": {\r",
											"                                        \"type\": \"string\"\r",
											"                                    },\r",
											"                                    \"unit\": {\r",
											"                                        \"type\": \"string\"\r",
											"                                    }\r",
											"                                }\r",
											"                            }\r",
											"                        },\r",
											"                        \"display-in-new-browser-window\": {\r",
											"                            \"type\": \"boolean\"\r",
											"                        }\r",
											"                    }\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! reference could not be defined.\")\r",
											"}\r",
											"\r",
											"try {\r",
											"    if (uri != dummyUri) {\r",
											"        logger.log(\"Analysis:\");\r",
											"\r",
											"        pm.test(\"/v1/provide-list-of-network-element-interfaces-on-path-in-generic-representation could be executed\", function () {\r",
											"            pm.expect(responseCode).to.equal(200)\r",
											"        });\r",
											"        if (responseCode == 200) {\r",
											"            logger.log(\"  - ok: /v1/provide-list-of-network-element-interfaces-on-path-in-generic-representation could be executed\")\r",
											"        } else {\r",
											"            logger.log(\"  - FAIL: /v1/provide-list-of-network-element-interfaces-on-path-in-generic-representation provided \" + responseCode + \" instead of 200\")\r",
											"        }\r",
											"\r",
											"        if (Object.keys(responseObject).length != 0) {\r",
											"            logger.log(\"Reference Schema:\");\r",
											"            logger.log(reference);\r",
											"\r",
											"            logger.log(\"Interface Response:\");\r",
											"            logger.log(responseObject);\r",
											"\r",
											"            let validationResult;\r",
											"            validationResult = tv4.validateMultiple(responseObject, reference, true, true);\r",
											"            logger.log(\"Validation Result:\");\r",
											"            logger.log(validationResult);\r",
											"\r",
											"            pm.test(\"Response matches schema definition\", function () {\r",
											"                pm.expect(validationResult.errors.length).to.equal(0)\r",
											"            });\r",
											"            if (validationResult.errors.length == 0) {\r",
											"                logger.log(\"  - ok: Response matches schema definition\")\r",
											"            } else {\r",
											"                logger.log(\"  - FAIL: Response matches schema definition\")\r",
											"            }\r",
											"\r",
											"        }\r",
											"\r",
											"    }\r",
											"\r",
											"} catch (error) {\r",
											"    logger.error(\"! validation could not be completely executed.\")\r",
											"}\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Setting Collection Variables\r",
											"****************************************************************************************/\r",
											"\r",
											"\r",
											"/****************************************************************************************\r",
											"* Functions\r",
											"****************************************************************************************/\r",
											"function ExtractServerInformation(serverList, searchedServerName) {\r",
											"    try {\r",
											"        for (let i = 0; i < serverList.length; i++) {\r",
											"            if (serverList[i].serverName == searchedServerName) {\r",
											"                return serverList[i]\r",
											"            }\r",
											"        }\r",
											"    } catch (error) {\r",
											"        logger.error(\"! serverList not found or faulty\");\r",
											"        return {}\r",
											"    }\r",
											"    logger.warn(\"Server could not be found in serverList.\");\r",
											"    return {}\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Termination",
			"item": [
				{
					"name": "Clearing collection data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"logger.struc(\"\\n===== Clearing collection data ============================================================\");\r",
									"\r",
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"var dummyServerInfo;\r",
									"try {\r",
									"    let serverList;\r",
									"    serverList = pm.environment.get(\"serverList\");\r",
									"    dummyServerInfo = ExtractServerInformation(serverList, \"dummy\")\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Input data could not be loaded.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Processing\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let uri;\r",
									"    uri = dummyServerInfo.dummyUri;\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" })\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Local variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function ExtractServerInformation(serverList, searchedServerName) {\r",
									"    try {\r",
									"        for(let i=0; i<serverList.length; i++) {\r",
									"            if(serverList[i].serverName==searchedServerName) {\r",
									"                return serverList[i]\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        logger.error(\"! serverList not found or faulty\");\r",
									"        return {}\r",
									"    }\r",
									"    logger.warn(\"Server could not be found in serverList.\");\r",
									"    return {}\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Extracting Result\r",
									"****************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environment Variables\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"    pm.collectionVariables.clear();\r",
									"    pm.variables.clear()\r",
									"\r",
									"} catch (error) {\r",
									"    logger.error(\"! Environment variables could not be set.\")\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Log levels ordered based on most to less verbose:",
					"// This script expects \"logLevel\" environment variable to be one of these log levels:",
					"// debug -> log -> info -> warn -> error -> struc -> none",
					"// It creates \"logger\" global variable which can be used anywhere in nested collection scripts",
					"",
					"const logLevels = [\"debug\", \"log\", \"info\", \"warn\", \"error\", \"struc\", \"none\"];",
					"",
					"const shouldLog = (level) => {",
					"  return logLevels.indexOf(level) >= logLevels.indexOf(pm.environment.get(\"logLevel\"));",
					"};",
					"",
					"logger = {",
					"  debug: (message, ...optionalParams) => {",
					"    shouldLog(\"debug\") && console.log(message, ...optionalParams);",
					"  },",
					"  log: (message, ...optionalParams) => {",
					"    shouldLog(\"log\") && console.log(message, ...optionalParams);",
					"  },",
					"  info: (message, ...optionalParams) => {",
					"    shouldLog(\"info\") && console.log(message, ...optionalParams);",
					"  },",
					"  warn: (message, ...optionalParams) => {",
					"    shouldLog(\"warn\") && console.log(message, ...optionalParams);",
					"  },",
					"  error: (message, ...optionalParams) => {",
					"    shouldLog(\"error\") && console.error(message, ...optionalParams);",
					"  },",
					"  struc: (message, ...optionalParams) => {",
					"    shouldLog(\"error\") && console.log(message, ...optionalParams);",
					"  },",
					"};",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}