@startuml
skinparam responseMessageBelowArrow true
skinparam guillemet [ ]
skinparam participant {
  StereotypeFontSize 12  
}
hide stereotype

title  Periodic (DeviceList) Sync with Controller process flow


'participants
participant "RO" as ro
participant "MWDI://v1/embed-yourself" as mwdi <<mwdi-1-0-0-op-s-bm-001>>
participant "ODL://rests/data/network-topology:network-topology/\ntopology=topology-netconf?fields=\nnode(node-id;netconf-node-topology:connection-status)" as odlConnectionStatus <<mwdi-1-0-0-op-c-is-c-4-0-2-010>>
participant "ElasticSearch" as es <<mwdi-1-0-0-es-c-es-1-0-0-000>>
participant "XX://v1/regard-availability-of-new-device" as notificationToXX <<mwdi-1-0-0-op-c-is-xx-1-0-0-000>>


ro -> mwdi
activate mwdi

'get deviceList from Controller
note over mwdi: compare list from Controller\n & MWDI deviceList
mwdi -> odlConnectionStatus
odlConnectionStatus --> mwdi: {list of-(mount-name, connection-status)}

'get MWDI deviceList from ElasticSearch 
mwdi -> es
es --> mwdi: {mount-name-list}

'diff both lists and process devices accordingly
note over es
 <b>action-required</b>: add or delete
 - <b>add</b>: (new device) add mount-name 
   to deviceList
 - <b>delete</b>: (disconnected device) remove 
   mount-name and related ControlConstruct
end note 


mwdi -> es: {list-of-(mount-name, action-required)}

'inform subscribers about new device
note over notificationToXX: inform subscribers if there's a new device
mwdi -> notificationToXX: {notification for mount-name}



left footer 


<u> Controller connection info:</u>
\t- For requesting information from other applications first <i>RO://v1/list-applications</i> would have to be executed to fetch {ApplicationName, ReleaseNumber, IpAddress, TcpPort}, 
\t  as the connection information may change during runtime.
\t-  When the MWDI sends requests to the Controller, however, this information needs to be added in the MWDI manually, because the Controller is not part of the 
\t  ApplicationFramework (no entries in RO!). 
\t-  In future releases there may be the CurrentController app which has the purpose of just providing the connection information of the Controller from within the AppFramework.
\t-  Also note: instead of providing directly the Controller connection details, the loadbalancer (distributes load across the available controller VMs) could be addressed.

<u> Notification to subscribers about new device:</u>
\t- the subscriber app (XX, as it's not known at specification time) needs to implement <i>/v1/regard-availability-of-new-device</i>
\t- subscriber apps can see how to do that by looking at the related callbacks in the MWDI OAS 
\t- information about subscriber apps is stored and managed by <i>MDWI://v1/notify-availability-of-new-device</i> [mwdi-1-0-0-op-s-is-000]

<u> Notifications about device-state-changes and period sync<u>:
\t- normally the MWDI would receive notifications from the NotificationProxy informing about new (connected) or disconnected (connecting) devices, so if everything works, this
\t  process flow would not lead to any changes in the MWDI deviceList.
\t- However, notifications may be lost or the received notifications may be still processed while the sync is running; in that cases the sync can cause updates to the 
\t  MWDI device list 

end footer

<style>
footer {
  HorizontalAlignment left
  FontSize 14
}
</style>

@enduml