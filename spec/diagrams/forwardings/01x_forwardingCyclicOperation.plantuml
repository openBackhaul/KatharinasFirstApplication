@startuml
skinparam responseMessageBelowArrow true

title  Periodic (DeviceList) Sync with Controller process flow

"RO" -> "/v1/embed-yourself": {RoIp, RoPort}
"/v1/embed-yourself" --> "RO": {}

note over "/v1/embed-yourself": compare list from Controller\n & MWDI deviceList

"/v1/embed-yourself" -> "ODL://rests/data/network-topology:network-topology/\ntopology=topology-netconf?fields=\nnode(node-id;netconf-node-topology:connection-status)"
"ODL://rests/data/network-topology:network-topology/\ntopology=topology-netconf?fields=\nnode(node-id;netconf-node-topology:connection-status)" --> "/v1/embed-yourself": {list of-(mount-name, connection-status)}

"/v1/embed-yourself" -> "ElasticSearch": {}
"ElasticSearch" --> "/v1/embed-yourself": {mount-name-list}

note over "ElasticSearch"
 <b>action-required</b>: add or delete
 - <b>add</b>: (new device) add mount-name 
   to deviceList
 - <b>delete</b>: (disconnected device) remove 
   mount-name and related ControlConstruct
end note 

"/v1/embed-yourself" -> "ElasticSearch": {list-of-(mount-name, action-required)}
"ElasticSearch" --> "/v1/embed-yourself": {}


note over "ODL://rests/operations/network-topology:network-topology/\ntopology=topology-netconf/node={mount-name}/\nyang-ext:mount/notifications:create-subscription"
<b>subscribe to device notifications</b> per relevant device
1. create subscription stream to the device
2. subscribe to the stream
3. listen to the stream (GET)
end note

"/v1/embed-yourself" -> "ODL://rests/operations/network-topology:network-topology/\ntopology=topology-netconf/node={mount-name}/\nyang-ext:mount/notifications:create-subscription\n[<i>mwdi-1-0-0-op-c-is-c-4-0-2-020</i>]": {mount-name (in path), required-response-body}
"ODL://rests/operations/network-topology:network-topology/\ntopology=topology-netconf/node={mount-name}/\nyang-ext:mount/notifications:create-subscription\n[<i>mwdi-1-0-0-op-c-is-c-4-0-2-020</i>]" --> "/v1/embed-yourself": {}

"/v1/embed-yourself" -> "ODL://rests/operations/odl-device-notification:\nsubscribe-device-notification\n[<i>mwdi-1-0-0-op-c-is-c-4-0-2-021</i>]": {input-path}
"ODL://rests/operations/odl-device-notification:\nsubscribe-device-notification\n[<i>mwdi-1-0-0-op-c-is-c-4-0-2-021</i>]" --> "/v1/embed-yourself": {odl-device-notification-output}

"/v1/embed-yourself" -> "ODL://rests/notif/{mount-name}\n?notificationType=device\n[<i>mwdi-1-0-0-op-c-is-c-4-0-2-022</i>]": {}
"ODL://rests/notif/{mount-name}\n?notificationType=device\n[<i>mwdi-1-0-0-op-c-is-c-4-0-2-022</i>]" --> "/v1/embed-yourself": {}


left footer 


\t- For requesting information from other applications first <i>RO://v1/list-applications</i> would have to be executed to fetch {ApplicationName, ReleaseNumber, IpAddress, TcpPort}, 
\t  as the connection information may change during runtime.
\t-  When the MWDI sends requests to the Controller, however, this information needs to be added in the MWDI manually, because the Controller is not part of the 
\t  ApplicationFramework (no entries in RO!). 
\t-  In future releases there may be the CurrentController app which has the purpose of just providing the connection information of the Controller from within the AppFramework.
\t-  Also note: instead of providing directly the Controller connection details, the loadbalancer (distributes load across the available controller VMs) could be addressed.
end footer

<style>
footer {
  HorizontalAlignment left
  FontSize 14
}
</style>

@enduml