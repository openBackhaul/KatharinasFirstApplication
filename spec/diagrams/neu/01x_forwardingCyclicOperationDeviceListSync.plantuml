@startuml
skinparam responseMessageBelowArrow true
skinparam BoxPadding 10

title  Periodic (DeviceList) Sync with Controller process flow


'participants
participant "RO" as ro
participant "MWDI://v1/embed-yourself" as mwdi
participant "ODL://{mwdi-1-0-0-string-p-000}?fields=\nnode(node-id;netconf-node-topology:\nconnection-status)" as odlConnectionStatus
participant "ElasticSearch" as es

box inform about new device
participant "MWDI://v1/notify-object-creations" as notifyCreate
participant "XX://v1/regard-object-creation" as subscriberOpCreate
end box

box inform about deleted device
participant "MWDI://v1/notify-object-deletions" as notifyDelete
participant "XX://v1/regard-object-deletion" as subscriberOpDelete
end box

ro -> mwdi
activate mwdi

'get deviceList from Controller
note over mwdi: compare list from Controller\n & MWDI deviceList
mwdi -> odlConnectionStatus
odlConnectionStatus --> mwdi: {list of-(mount-name, connection-status)}

'get MWDI deviceList from ElasticSearch 
mwdi -> es
es --> mwdi: {mount-name-list}

'diff both lists and process devices accordingly
note over es
 <b>action-required</b>: add or delete
 - <b>add</b>: (new device) add mount-name 
   to deviceList
 - <b>delete</b>: (disconnected device) remove 
   mount-name and related ControlConstruct
end note 


mwdi -> es: {list-of-(mount-name, action-required)}

'inform subscribers about new device
mwdi -> notifyCreate: {mount-name}

note over subscriberOpCreate
(analog zu 02x) prüfen: 
- was ist der objectType = string?
  es muss ja eigentlich nur der mount-name 
  des neuen Devices geschickt werden 
- als objectIdReference müssste dann 
  eigentlich auch der mount-name ausreichen
end note

notifyCreate -> subscriberOpCreate: {counter, timestamp, objectType, \nobjIdReference (=mount-name)} \n

'inform subscribers about deleted device
mwdi -> notifyDelete: {mount-name}

notifyDelete -> subscriberOpDelete: {counter, timestamp, \nobjIdReference (=mount-name)} \n



left footer 


<u> Controller connection info:</u>
\t- For requesting information from other applications first <i>RO://v1/list-applications</i> would have to be executed to fetch {ApplicationName, ReleaseNumber, IpAddress, TcpPort}, 
\t  as the connection information may change during runtime.
\t-  When the MWDI sends requests to the Controller, however, this information needs to be added in the MWDI manually, because the Controller is not part of the 
\t  ApplicationFramework (no entries in RO!). 
\t-  In future releases there may be the CurrentController app which has the purpose of just providing the connection information of the Controller from within the AppFramework.
\t-  Also note: instead of providing directly the Controller connection details, the loadbalancer (distributes load across the available controller VMs) could be addressed.

end footer

<style>
footer {
  HorizontalAlignment left
  FontSize 14
}
</style>

@enduml