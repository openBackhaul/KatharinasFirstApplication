@startuml
skinparam responseMessageBelowArrow true
skinparam guillemet [ ]
skinparam participant {
  StereotypeFontSize 12  
}

title Process device notifications about changed ControlConstruct parameters

'participants
participant "NP://todo_device_notification" as npDevChangeNotif <<mwdi-1-0-0-op-c-is-np-1-0-0-001>>
participant "/v1/embed-yourself" as mwdi <<mwdi-1-0-0-op-s-bm-001>>
participant "ElasticSearch" as es <<mwdi-1-0-0-es-c-es-1-0-0-000>>
participant "XY://v1/regard-changed-attribute-value" as notification <<mwdi-1-0-0-op-c-is-xy-1-0-0-000>>

note over mwdi: receive notification
npDevChangeNotif -> mwdi: {mount-name, path-to-changed-parameter, new-value, timestamp}
mwdi --> npDevChangeNotif

note over mwdi: update cached ControlConstruct
mwdi -> es: {mount-name, list-of-(path-to-changed-parameter, new-value, timestamp)} \n[ggf. nur 1 Ã„nderung, dann keine Liste]
es --> mwdi

note over mwdi: notify subscribers about changed CC
mwdi -> notification: {mount-name, list-of-changes}
notification --> mwdi



left footer 


<u> Notification to subscribers: </u>
\t  - the subscriber app (XY, as it's not known at specification time) needs to implement <i>/v1/regard-changed-attribute-value</i>
\t  - subscriber apps can see how to do that by looking at the related callbacks in the MWDI OAS 
\t  - information about subscriber apps is stored and managed by <i>MDWI://v1/notify-changed-attribute-value</i> [mwdi-1-0-0-op-s-is-001]
\t  - the notification informs about all changes, where possible together with new values

end footer

<style>
footer {
  HorizontalAlignment left
  FontSize 14
}
</style>

@enduml